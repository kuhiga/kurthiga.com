---
import { ViewTransitions } from "astro:transitions";
import { Config } from "../config";
import icon from "../assets/icon.png";

interface Props {
  title?: string;
  description?: string;
  og_title?: string;
  og_description?: string;
  og_type?: string;
  og_image?: string;
}

const {
  title = Config.me.name,
  description = Config.me.name + "'s personal website.",
  og_title = Config.me.name,
  og_description = Config.me.name + "'s personal website.",
  og_type = "website",
  og_image = Config.og.image,
} = Astro.props;

const currentPath = Astro.url.pathname;
---

<!doctype html>
<html class="bg-base-100 text-base-content overflow-y-scroll" lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href={icon.src} />
    <meta name="robots" content="noindex, nofollow" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta property="og:title" content={og_title} />
    <meta property="og:description" content={og_description} />
    <meta property="og:type" content={og_type} />
    <meta property="og:image" content={og_image} />
    <meta property="og:url" content={Astro.request.url} />
    <script>
      //@ts-nocheck
      !(function (t, e) {
        var o, n, p, r;
        e.__SV ||
          ((window.posthog = e),
          (e._i = []),
          (e.init = function (i, s, a) {
            function g(t, e) {
              var o = e.split(".");
              2 == o.length && ((t = t[o[0]]), (e = o[1])),
                (t[e] = function () {
                  t.push([e].concat(Array.prototype.slice.call(arguments, 0)));
                });
            }
            ((p = t.createElement("script")).type = "text/javascript"),
              (p.async = !0),
              (p.src =
                s.api_host.replace(".i.posthog.com", "-assets.i.posthog.com") +
                "/static/array.js"),
              (r = t.getElementsByTagName("script")[0]).parentNode.insertBefore(
                p,
                r
              );
            var u = e;
            for (
              void 0 !== a ? (u = e[a] = []) : (a = "posthog"),
                u.people = u.people || [],
                u.toString = function (t) {
                  var e = "posthog";
                  return (
                    "posthog" !== a && (e += "." + a), t || (e += " (stub)"), e
                  );
                },
                u.people.toString = function () {
                  return u.toString(1) + ".people (stub)";
                },
                o =
                  "capture identify alias people.set people.set_once set_config register register_once unregister opt_out_capturing has_opted_out_capturing opt_in_capturing reset isFeatureEnabled onFeatureFlags getFeatureFlag getFeatureFlagPayload reloadFeatureFlags group updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures getActiveMatchingSurveys getSurveys onSessionId".split(
                    " "
                  ),
                n = 0;
              n < o.length;
              n++
            )
              g(u, o[n]);
            e._i.push([i, s, a]);
          }),
          (e.__SV = 1));
      })(document, window.posthog || []);
      posthog.init(import.meta.env.PUBLIC_POSTHOG_KEY, {
        api_host: "https://us.i.posthog.com",
      });
    </script>
    <ViewTransitions />
  </head>
  <body>
    <div
      class="mx-auto flex min-h-screen max-w-4xl flex-col gap-9 px-10 py-8 md:gap-20 md:py-16">
      <header
        class="flex w-full flex-col gap-3 md:gap-2 md:flex-row md:justify-between pb-5 md:pb-0">
        <a href="/" class="text-xl">{Config.me.name}</a>
        <nav class="text-sm custom-breadcrumbs">
          <ul>
            <li>
              <a class={currentPath === "/" ? "text-primary" : ""} href="/"
                >Home</a
              >
            </li>
            <li>
              <a
                class={currentPath.startsWith("/posts") ? "text-primary" : ""}
                href="/posts">Posts</a
              >
            </li>
          </ul>
        </nav>
      </header>
      <slot />
    </div>
    <style is:global>
      .custom-breadcrumbs {
        max-width: 100%;
        overflow-x: auto;
        padding-top: 0.5%;
      }

      .custom-breadcrumbs > ul {
        display: flex;
        align-items: center;
        white-space: nowrap;
        min-height: min-content;
      }

      .custom-breadcrumbs > ul > li {
        display: flex;
        align-items: center;
      }

      .custom-breadcrumbs > ul > li > a {
        display: flex;
        cursor: pointer;
        align-items: center;
      }

      @media (hover: hover) {
        .custom-breadcrumbs > ul > li > a:hover {
          text-decoration-line: underline;
        }
      }

      .custom-breadcrumbs > ul > li > a:focus {
        outline: 2px solid transparent;
        outline-offset: 2px;
      }

      .custom-breadcrumbs > ul > li > a:focus-visible {
        outline: 2px solid currentColor;
        outline-offset: 2px;
      }

      .custom-breadcrumbs > ul > li + *:before {
        content: "/";
        margin-left: 0.5rem /* 8px */;
        margin-right: 0.75rem /* 12px */;
        display: block;
        opacity: 0.4;
        background-color: transparent;
      }

      [dir="rtl"] .custom-breadcrumbs > ul > li + *:before {
        --tw-rotate: -180deg;
      }
    </style>
  </body>
</html>
